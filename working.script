library(tidyverse)
library(lubridate)
library(SafeGraphR)
library(baseballr)
library(sf)
library(mapboxapi)
library(xgboost)
library(caret)
library(caTools)
library(cvms)


####################
## DATA PREP
####################

### READING IN FILES

patterns_df <- readr::read_csv("pitt-data.csv")

### CLEANING UP DATE_RANGE_START VARIABLE

patterns_df$date_range_start <- as.Date(patterns_df$date_range_start, format = "%Y-%m-%d")

### SELECTING VARIABLES TO MERGE BACK IN AFTER EXPANSION

to.merge <- patterns_df %>%
  select(placekey, parent_placekey, location_name, sub_category, latitude, longitude,
         street_address, city, region, postal_code, polygon_wkt, poi_cbg)

### EXPANDING VISITS_BY_DAY

day_data_df <- expand_integer_json(patterns_df,
                                   expand = "visits_by_day",
                                   index = "day",
                                   by = c("placekey", "date_range_start"))

### MERGING BACK IN OTHER VARIABLES

to.merge.distinct <- to.merge %>%
  distinct(placekey, .keep_all = TRUE)

merged.data <- inner_join(day_data_df, to.merge.distinct, by = c("placekey" = "placekey"))

### ADDING RUNNING DATE TO MERGED DATA
merged.data <- merged.data %>%
  group_by(placekey, date_range_start) %>%
  mutate(date = first(date_range_start) + days(1 * row_number() - 1))

#####################
## STEELERS STUFF
#####################

### GRABBING 2018 STEELERS SCHEDULE FOR MERGING
steelers.2018 <- nflreadr::load_schedules(seasons = 2018) %>%
  filter(home_team == "PIT") %>%
  select(gameday, away_team, home_moneyline, div_game)

### CONVERTING STEELERS GAME DATE TO AS.DATE FORMAT
steelers.2018$gameday <- as.Date(steelers.2018$gameday, format = "%Y-%m-%d")

### CONVERTING STEELERS GAMEDAY TO NUMERICAL WEEK VALUE
steelers.2018$st.weekday <- lubridate::wday(steelers.2018$gameday)

### CONVERTING STEELERS OPPONENTS TO NUMERIC INTEGER
steelers.2018$away_team <- as.factor(steelers.2018$away_team)
steelers.2018$away_team <- as.integer(steelers.2018$away_team)

### STANDARDIZING VARIABLE NAMES FOR USE WITH OTHER TEAMS
steelers.2018 <- steelers.2018 %>%
  rename(game_date = gameday,
         st.weekday = st.weekday,
         st.oppo = away_team,
         st.ml = home_moneyline,
         st.div = div_game)

### MERGING STEELERS DATA INTO MAIN DATA
merged.data <- merged.data %>%
  left_join(steelers.2018, by = c("date" = "game_date"))


#####################
## PIRATES STUFF
#####################

### GETTING PIRATES 2018 SCHEDULE
pirates.2018 <- baseballr::mlb_schedule(season = 2018) %>%
  filter(teams_home_team_name == "Pittsburgh Pirates" & series_description == "Regular Season") %>%
  select(date, teams_away_team_name)

### NO PACKAGE FOR HISTORICAL MLB MONEYLINES, SO DOING THIS THE OLD-FASHIONED WAY
moneylines <- c(-138, -110, -150, 111, -131, -148, -128, -137, -120, -199, -155, -151, 115, 113, 111,
                -122, -120, -145, -131, -174, -122, -112, -119, -140, -139, -130, -107, -121, -106, 117, 121, 112, 105, -122,
                -134, -103, -150, -100, -120, -111, -119, 108, -101, -119, -104, -135, -160, 100, 107, 124, -120, -113,
                -105, 116, -110, -141, -134, 115, -151, -111, 116, -155, -113, -102, 107, 117, -150, -117, -125,
                112, -101, -129, -137, -132, -180, -203, -156, -170, -219, -214, 123, 112, 135)
pirates.moneylines <- data.frame(moneylines)

### ADDING PIRATES MONEYLINES TO PIRATES SCHEDULE
pirates.2018 <- cbind(pirates.2018, pirates.moneylines)

### PIRATES ADDING NLC OPPONENTS
pirates.2018 <- pirates.2018 %>%
  mutate(pirates.div = if_else(teams_away_team_name %in% c("St. Louis Cardinals",
                                                           "Milwaukee Brewers",
                                                           "Chicago Cubs",
                                                           "Cincinnati Reds"), 1, 0))

### CONVERTING PIRATES GAME DATE TO AS.DATE FORMAT
pirates.2018$date <- as.Date(pirates.2018$date, format = "%Y-%m-%d")

### CONVERTING PIRATES GAMEDAY TO NUMERICAL WEEK VALUE
pirates.2018$pi.weekday <- lubridate::wday(pirates.2018$date)

### CONVERTING PIRATES OPPONENTS TO NUMERIC INTEGER
pirates.2018$teams_away_team_name <- as.factor(pirates.2018$teams_away_team_name)
pirates.2018$teams_away_team_name <- as.integer(pirates.2018$teams_away_team_name)

### STANDARDIZING PIRATES VARIABLE NAMES FOR USE WITH OTHER TEAMS
pirates.2018 <- pirates.2018 %>%
  rename(game_date = date,
         pi.weekday = pi.weekday,
         pi.oppo = teams_away_team_name,
         pi.ml = moneylines,
         pi.div = pirates.div)

### MERGING WITH OTHER DATA
merged.data <- merged.data %>%
  left_join(pirates.2018, by = c("date" = "game_date"))

#####################
## PENGUINS STUFF  ## note: reading directly in from .csv with downloaded data from hockey ref
#####################
penguins_info <- readr::read_csv("penguins_info.csv")

### CLEANING UP DATE VARIABLE FOR PENGUINS DATA
penguins_info$date <- as.Date(penguins_info$date, format = "%m/%d/%Y")

###ADDING PENGUINS METROPOLITAN DIVISION
penguins_info <- penguins_info %>%
  mutate(penguins.div = if_else(opponent %in% c("Washington Capitals",
                                                "New York Islanders",
                                                "Carolina Hurricanes",
                                                "Columbus Blue Jackets",
                                                "Philadelphia Flyers",
                                                "New York Rangers",
                                                "New Jersey Devils"), 1, 0))

### CONVERTING PENGUINS GAMEDAY TO NUMERICAL WEEK VALUE
penguins_info$pe.weekday <- lubridate::wday(penguins_info$date)

### CONVERTING PENGUINS OPPONENTS TO NUMERIC INTEGER
penguins_info$opponent <- as.factor(penguins_info$opponent)
penguins_info$opponent <- as.integer(penguins_info$opponent)

### STANDARDIZING PENGUINS VARIABLE NAMES FOR USE WITH OTHER TEAMS
penguins_info <- penguins_info %>%
  rename(game_date = date,
         pe.weekday = pe.weekday,
         pe.oppo = opponent,
         pe.ml = moneyline,
         pe.div = penguins.div)

### MERGING PENGUINS DATA WITH MAIN DATA
merged.data <- merged.data %>%
  left_join(penguins_info, by = c("date" = "game_date"))


#####################
## WEATHER DATA   ## note: historical weather data obtained from visualcrossing.com
#####################

pitt_wx <- readr::read_csv("pitt_wx.csv")

### CLEANING UP DATE VARIABLE FOR WEATHER DATA
pitt_wx$datetime <- as.Date(pitt_wx$datetime, format = "%Y-%m-%d")

### SELECTING RELEVANT COLUMNS FROM WEATHER DATA
pitt_wx <- pitt_wx %>%
  select(datetime, tempmax, tempmin, temp, humidity, precip, precipprob,
         snow, windgust, windspeed, cloudcover, icon)

### CONVERTING WEATHER ICON CHARACTER TO NUMERIC INTEGER
pitt_wx$icon <- as.factor(pitt_wx$icon)
pitt_wx$icon <- as.integer(pitt_wx$icon)

### MERGING WEATHER DATA INTO MAIN DATA
merged.data <- merged.data %>%
  left_join(pitt_wx, by = c("date" = "datetime"))


#####################
## CALCULATING DISTANCE FROM STADIUM FOR EACH RESTAURANT
#####################

### PROVING CREDENTIALS FOR MAPBOX API SERVICES  ## note: access token is removed from public code
mb_access_token(my_token, overwrite  = TRUE, install = TRUE) ##FOR MAPBOX API
readRenviron("~/.Renviron")

### CREATING SUBSET OF DATA TO CREATE DISTANCE MATRIX   ## note: must drop NA coord values and repeat on main data prior to merge
distance.data <- merged.data %>%
  filter(!is.na(longitude) & !is.na(latitude)) %>%
  distinct(placekey, longitude, latitude) %>%
  st_as_sf(coords = c("longitude", "latitude"),
           crs = "+proj=longlat +datum=WGS84 +ellps=WGS84")

### GETTING COORDINATE INFOMATION FOR EACH STADIUM
pnc.distance <- mb_geocode("PNC Park, Pittsburgh PA")
heinz.distance <- mb_geocode("Heinz Field, Pittsburgh PA")
ppg.distance <- mb_geocode("PPG Paints Arena, Pittsburgh PA")

### MAPPING MINUTES TO EACH STADIUM VIA SF TRACT CENTROIDS
minutes_to_pnc <- mb_matrix(distance.data, pnc.distance)
minutes_to_heinz <- mb_matrix(distance.data, heinz.distance)
minutes_to_ppg <- mb_matrix(distance.data, ppg.distance)

### ADDING DISTANCE IN TIME MATRIX FOR EACH STADIUM TO EACH PLACEKEY
distance.data$pnc.distance <- as.numeric(minutes_to_pnc)
distance.data$heinz.distance <- as.numeric(minutes_to_heinz)
distance.data$ppg.distance <- as.numeric(minutes_to_ppg)

### REPEATING THE DROPPING OF NA COORD VALUES IN MAIN DATA IN ORDER TO SUCCESSFULLY COMPLETE THE MERGE
merged.data <- merged.data %>%
  filter(!is.na(longitude) & !is.na(latitude))

### MERGING DISTANCE DATA INTO MAIN DATA VIA MATCHING PLACEKEY
merged.data <- merged.data %>%
  left_join(distance.data, by = c("placekey" = "placekey"))

write.csv(merged.data, "cleaned-data.csv")


#####################
## DATA CLEANING AND PREP IS NOW COMPLETE
#####################


#####################
## MODEL CREATION
#####################

### SUBSETTING MERGED.DATA TO INCLUDE JUST FACTORS NEEDED FOR XGBOOST AND NEURAL NETWORK MODELING
model.data <- merged.data %>%
  select(placekey, visits_by_day, st.oppo, st.ml, st.div, st.weekday,
         pi.oppo, pi.ml, pi.div, pi.weekday, pe.oppo, pe.ml, pe.div,
         pe.weekday, tempmax, tempmin, temp, humidity, precip, precipprob,
         snow, windgust, windspeed, cloudcover, icon, pnc.distance,
         heinz.distance, ppg.distance)

model.data <- model.data %>%
  filter(!is.na(placekey))

model.data <- model.data %>%
  mutate(place.id = as.numeric(factor(placekey)))

model.data <- model.data %>%
  dplyr::select(-placekey)

folds <- splitTools::create_folds(
  y = model.data$place.id,
  k = 5,
  type = "grouped",
  invert = TRUE)

### XGBOOST MODELING ###

### SETTNG SEED TO MAKE MODEL REPRODUCIBLE
set.seed(1984)

### SPLITTING THE DATA INTO TRAINING AND TESTING SETS
trainIndex <- createDataPartition(model.data$visits_by_day, p = .8,
                                  list = FALSE,
                                  times = 1)

pittTrain <- model.data[trainIndex,]
pittTest <- model.data[-trainIndex,]

train_labels <- pittTrain %>%
  dplyr::select(place.id)

pittTrain <- pittTrain %>%
  select(-place.id)

xgb_params <- list(
  booster = "gbtree",
  objective = "binary:logistic",
  eval_metric = "logloss",
  eta = 0.01,
  max_depth = 8,
  gamma = 4,
  subsample = 0.75,
  colsample_bytree = 1)

xgb_model <- xgboost::xgb.cv(
  data = as.matrix(pittTrain),
  label = train_labels$place.id,
  params = xgb_params,
  nrounds = 15000,
  folds = folds,
  metrics = list("logloss"),
  early_stopping_rounds = 50,
  print_every_n = 50
)


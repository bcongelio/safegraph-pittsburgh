library(tidyverse)
library(arrow)
library(tidymodels)
library(doParallel)


pitt_data <- arrow::read_parquet("./neural-data/shiny_parquet", as_tibble = TRUE)

xg_model <- pitt_data %>%
  select(visits_by_day, st.oppo, st.ml, st.div, st.weekday, pi.oppo, pi.ml, pi.div, pi.weekday,
         pe.oppo, pe.ml, pe.div, pe.weekday, temp, humidity, precip, snow, windspeed, icon)

xg_model[is.na(xg_model)] <- 0

set.seed(1984)

xg_split <- initial_split(xg_model)
xg_train <- training(xg_split)
xg_test <- testing(xg_split)

xgb_spec <- boost_tree(
  trees = 100,
  tree_depth = tune(), min_n = tune(),
  loss_reduction = tune(),
  sample_size = tune(), mtry = tune(),
  learn_rate = tune()) %>%
  set_engine("xgboost") %>%
  set_mode("regression")

xgb_grid <- grid_latin_hypercube(
  tree_depth(),
  min_n(),
  loss_reduction(),
  sample_size = sample_prop(),
  finalize(mtry(), xg_train),
  learn_rate(),
  size = 30)

xgb_wf <- workflow() %>%
  add_formula(visits_by_day ~ .) %>%
  add_model(xgb_spec)

set.seed(1988)
xb_folds <- vfold_cv(xg_train)


doParallel::registerDoParallel()

### running the model - note: currently at 1-hour, 26-minutes
xgb_res <- tune_grid(
  xgb_wf,
  resamples = xb_folds,
  grid = xgb_grid,
  control = control_grid(save_pred = TRUE))

collected.metrics <- collect_metrics(xgb_res)


xgb_res %>%
  collect_metrics() %>%
  filter(.metric == "rmse") %>%
  select(mean, mtry:sample_size) %>%
  pivot_longer(mtry:sample_size,
               values_to = "value",
               names_to = "parameter"
  ) %>%
  ggplot(aes(value, mean, color = parameter)) +
  geom_point(alpha = 0.8, show.legend = FALSE) +
  facet_wrap(~parameter, scales = "free_x") +
  labs(x = NULL, y = "RMSE")

########
RMSE of test > RMSE of train => OVER FITTING of the data.
RMSE of test < RMSE of train => UNDER FITTING of the data.
########

show_best(xgb_res, "rmse")


best_rmse <- select_best(xgb_res, "rmse")
best_rmse


final_xgb <- finalize_workflow(
  xgb_wf,
  best_rmse
)


library(vip)

final_xgb %>%
  fit(data = xg_train) %>%
  extract_fit_parsnip() %>%
  vip(geom = "point")


final_res <- last_fit(final_xgb, xg_split)

collect_metrics(final_res)


final_res %>%
  collect_predictions() %>%
  roc_curve(win, .pred_win) %>%
  ggplot(aes(x = 1 - specificity, y = sensitivity)) +
  geom_line(size = 1.5, color = "midnightblue") +
  geom_abline(
    lty = 2, alpha = 0.5,
    color = "gray50",
    size = 1.2
  )
